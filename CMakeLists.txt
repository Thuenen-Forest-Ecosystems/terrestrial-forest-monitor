cmake_minimum_required(VERSION 3.16)

# Increase Version on Release #15
project(playground VERSION 0.1.2 LANGUAGES CXX)

# set(CMAKE_AUTOMOC ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt6 6.4 REQUIRED COMPONENTS Quick LinguistTools)


qt_standard_project_setup()

qt_add_executable(playground
    main.cpp
)

#target_link_options(playground PRIVATE -s FULL_ES3=1)
#target_link_options(playground PRIVATE -s LIBRARY_DEBUG=1)


qt_add_qml_module(playground
    URI Playground
    VERSION 1.0
    QML_FILES
    Main.qml
    js/build/bundle.cjs.js
    js/build/dereference.cjs.js
    # RESOURCE_PREFIX "/root"
)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
set_target_properties(playground PROPERTIES

    # MACOSX_BUNDLE_GUI_IDENTIFIER com.example.playground
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

message(STATUS "Project: ${PROJECT_NAME} ${PROJECT_VERSION}")

# The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
# generated by CMake. This variable contains the .icns file name,
# without the path.
# #set(MACOSX_BUNDLE_ICON_FILE photosurface.icns)

# And the following tells CMake where to find and install the file itself.
# #set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/resources/photosurface.icns")
# #set_source_files_properties(${app_icon_macos} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

# #qt_add_executable(photosurfaceexample MACOSX_BUNDLE main.cpp ${app_icon_macos})

add_subdirectory(Routes)

add_subdirectory(Generic)
add_subdirectory(Components/Layouts)

add_subdirectory(StaticData)

add_subdirectory(Components/AuthOpenApi)

add_subdirectory(Components/SyncOpenApi)
add_subdirectory(Components/Gnss)
add_subdirectory(Components/NetworkState)

# find_package(Qt6 REQUIRED COMPONENTS Bluetooth)
target_link_libraries(playground PRIVATE
    Qt6::Quick
    Qt6::Core
    Qt6::Gui
    Qt6::Qml

    # Qt6::Bluetooth
    AuthOpenApiLibplugin
    SyncOpenApiLibplugin
    GnssLibplugin
    GenericLibplugin
    LayoutsLibplugin
    StaticDataLibplugin
    RoutesLibplugin
    NetworkStateLibplugin
)

include(GNUInstallDirs)
install(TARGETS playground
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# make IDEs aware of the QML import path
list(APPEND QML_DIRS "AuthOpenApi/")
list(APPEND QML_DIRS "SyncOpenApi/")
list(APPEND QML_DIRS "Generic/")
list(APPEND QML_DIRS "StaticData/")
list(APPEND QML_DIRS ${PROJECT_BINARY_DIR}/qml)
set(QML_IMPORT_PATH "${QML_DIRS}" CACHE STRING "Qt Creator 4.1 extra qml import paths")

# TRANSLATION: https://doc.qt.io/qt-6/qtqml-qml-i18n-example.html (linux)
# qt_add_translations(playground
# RESOURCE_PREFIX /qt/qml/translated/i18n
# TS_FILES
# i18n/base.ts
# i18n/qml_de.ts
# )



# Pack https://www.ics.com/blog/revisiting-qt-installer-framework-cmake
include(InstallRequiredSystemLibraries)
set(CPACK_GENERATOR "IFW")
set(CPACK_IFW_ROOT "/home/gerrit/Qt/Tools/QtInstallerFramework/4.7")
set(CPACK_PACKAGE_VERSION_MAJOR "1")
set(CPACK_PACKAGE_VERSION_MINOR "0")
#include(CPACK)
include(CPackIFW)

# PACK: https://www.youtube.com/watch?v=3xuq985YKI0 


# Qt/Tools/QtInstallerFramework/4.7/bin/binarycreator 
#set(CPACK_GENERATOR "IFW")
##set(CPACK_IFW_ROOT "$ENV{HOME}/Qt/Tools/QtInstallerFramework/4.1")
#set(CPACK_IFW_ROOT "/home/gerrit/Qt/Tools/QtInstallerFramework/4.7")
#set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
#set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
#include(CPACK)